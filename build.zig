const std = @import("std");

pub fn build(b: *std.Build) !void {
    const target = b.standardTargetOptions(.{});
    const optimize = b.standardOptimizeOption(.{});

    // Executables
    const exes_step = b.step("exes", "Build executables");

    inline for (PATHS) |PATH| {
        const exe = b.addExecutable(.{
            .name = std.fs.path.basename(PATH),
            .target = target,
            .optimize = optimize,
        });
        exe.addCSourceFiles(.{ .files = &.{"src/" ++ PATH ++ ".cpp"}, .flags = &.{"-std=c++20"} });
        exe.linkLibCpp();

        const exe_install = b.addInstallArtifact(exe, .{ .dest_dir = .{ .override = .{ .custom = std.fs.path.dirname(PATH).? } } });
        exes_step.dependOn(&exe_install.step);
    }

    b.default_step.dependOn(exes_step);
}

const PATHS = &.{
    "algorithms/compression/huffman_coding",
    "algorithms/dynamic-programming/bishops_problem",
    "algorithms/dynamic-programming/boolean_parenthesization_problem",
    "algorithms/dynamic-programming/dice_rolling_problem",
    "algorithms/dynamic-programming/discrete_knapsack_with_repetitions",
    "algorithms/dynamic-programming/discrete_knapsack_without_repetitions",
    "algorithms/dynamic-programming/interval_scheduling",
    "algorithms/dynamic-programming/josephus_problem",
    "algorithms/dynamic-programming/levenshtein_distance",
    "algorithms/dynamic-programming/longest_common_subsequence",
    "algorithms/dynamic-programming/longest_increasing_subsequence",
    "algorithms/dynamic-programming/longest_zero_subsequence",
    "algorithms/dynamic-programming/minimum_coin_change",
    "algorithms/dynamic-programming/n_queens_problem",
    "algorithms/dynamic-programming/optimal_binary_search_tree",
    "algorithms/dynamic-programming/staircase_problem",
    "algorithms/dynamic-programming/travelling_salesman_problem",
    "algorithms/game-playing/tic_tac_toe",
    "algorithms/graph/bellman_ford",
    "algorithms/graph/bipartiteness_check",
    "algorithms/graph/breadth_first_search",
    "algorithms/graph/component_detection",
    "algorithms/graph/cycle_detection",
    "algorithms/graph/depth_first_search",
    "algorithms/graph/topological_sort",
    "algorithms/greedy/largest_number",
    "algorithms/greedy/minimum_refueling_stops",
    "algorithms/greedy/minimum_segments_over_sorted_points",
    "algorithms/greedy/sorted_fractional_knapsack",
    "algorithms/hashing/cryptographic_hashing",
    "algorithms/hashing/spatial_hashing",
    "algorithms/mathematical/bit-manipulation/binary_arithmetic",
    "algorithms/mathematical/bit-manipulation/gray_code",
    "algorithms/mathematical/bit-manipulation/tower_of_hanoi",
    "algorithms/mathematical/combinatorics/binomial_coefficient",
    "algorithms/mathematical/combinatorics/catalan_number",
    "algorithms/mathematical/combinatorics/combinations_with_repetitions",
    "algorithms/mathematical/combinatorics/combinations_without_repetitions",
    "algorithms/mathematical/combinatorics/factorial",
    "algorithms/mathematical/combinatorics/necklace_colourings",
    "algorithms/mathematical/combinatorics/number_of_inversions",
    "algorithms/mathematical/combinatorics/pascal_triangle",
    "algorithms/mathematical/combinatorics/permutation_decomposition_into_independent_cycles",
    "algorithms/mathematical/combinatorics/permutations_with_repetitions",
    "algorithms/mathematical/combinatorics/permutations_without_repetitions",
    "algorithms/mathematical/combinatorics/stirling_number_of_the_second_kind",
    "algorithms/mathematical/computational-geometry/angle_between_vectors",
    "algorithms/mathematical/computational-geometry/distance_from_point_to_segment",
    "algorithms/mathematical/computational-geometry/domino_tiling",
    "algorithms/mathematical/computational-geometry/minkowski_distance",
    "algorithms/mathematical/computational-geometry/point_in_convex_polygon_check",
    "algorithms/mathematical/computational-geometry/polygon_convexity_check",
    "algorithms/mathematical/computational-geometry/segment_intersection_check",
    "algorithms/mathematical/computational-geometry/shoelace",
    "algorithms/mathematical/computational-geometry/triangle_check",
    "algorithms/mathematical/computational-geometry/triangle_type_by_angles",
    "algorithms/mathematical/linear-algebra/gauss_jordan_elimination",
    "algorithms/mathematical/linear-algebra/gaussian_elimination",
    "algorithms/mathematical/linear-algebra/horner_method",
    "algorithms/mathematical/linear-algebra/matrix_determinant",
    "algorithms/mathematical/linear-algebra/matrix_exponentiation",
    "algorithms/mathematical/linear-algebra/matrix_inverse",
    "algorithms/mathematical/linear-algebra/matrix_rank",
    "algorithms/mathematical/linear-algebra/matrix_transpose",
    "algorithms/mathematical/linear-algebra/polynomial_solver",
    "algorithms/mathematical/number-theory/baby_step_giant_step",
    "algorithms/mathematical/number-theory/bignum_arithmetic",
    "algorithms/mathematical/number-theory/chinese_remainder_theorem",
    "algorithms/mathematical/number-theory/euclidean",
    "algorithms/mathematical/number-theory/extended_euclidean",
    "algorithms/mathematical/number-theory/fermat_primality_test",
    "algorithms/mathematical/number-theory/fibonacci_number",
    "algorithms/mathematical/number-theory/fibonacci_number_modulo_m",
    "algorithms/mathematical/number-theory/karatsuba",
    "algorithms/mathematical/number-theory/least_common_multiple",
    "algorithms/mathematical/number-theory/linear_sieve",
    "algorithms/mathematical/number-theory/maximum_pairwise_product",
    "algorithms/mathematical/number-theory/miller_rabin_primality_test",
    "algorithms/mathematical/number-theory/prime_modular_inverses",
    "algorithms/mathematical/number-theory/sieve_of_atkin",
    "algorithms/mathematical/number-theory/sieve_of_eratosthenes",
    "algorithms/mathematical/number-theory/three_digit_armstrong_numbers",
    "algorithms/mathematical/number-theory/totient_function",
    "algorithms/mathematical/numerical-analysis/fast_fourier_transform",
    "algorithms/mathematical/numerical-analysis/hessian",
    "algorithms/mathematical/numerical-analysis/jacobian",
    "algorithms/mathematical/numerical-analysis/newton_cotes_rules",
    "algorithms/mathematical/numerical-analysis/riemann_sum",
    "algorithms/mathematical/numerical-analysis/runge_kutta_methods",
    "algorithms/mathematical/numerical-analysis/second_derivative_formula",
    "algorithms/mathematical/numerical-optimization/bisection_method",
    "algorithms/mathematical/numerical-optimization/golden_section_search",
    "algorithms/mathematical/numerical-optimization/linear_conjugate_gradient_method",
    "algorithms/mathematical/numerical-optimization/newton_raphson_method",
    "algorithms/mathematical/numerical-optimization/nonlinear_conjugate_gradient_methods",
    "algorithms/mathematical/numerical-optimization/secant_method",
    "algorithms/mathematical/numerical-optimization/ternary_search",
    "algorithms/mathematical/probability-theory/birthday_paradox",
    "algorithms/mathematical/probability-theory/coupon_collectors_problem",
    "algorithms/mathematical/probability-theory/random_walk",
    "algorithms/puzzle-solving/sudoku",
    "algorithms/search/binary_search",
    "algorithms/search/interpolation_search",
    "algorithms/search/linear_search",
    "algorithms/search/matrix_search",
    "algorithms/search/nearest_neighbour_search",
    "algorithms/search/quickselect",
    "algorithms/sorting/comparison-based/linear/bead_sort",
    "algorithms/sorting/comparison-based/linear/dutch_national_flag",
    "algorithms/sorting/comparison-based/log-linear/circle_sort",
    "algorithms/sorting/comparison-based/log-linear/heapsort",
    "algorithms/sorting/comparison-based/log-linear/introsort",
    "algorithms/sorting/comparison-based/log-linear/merge_sort",
    "algorithms/sorting/comparison-based/log-linear/quicksort_three_way_dual_pivot",
    "algorithms/sorting/comparison-based/log-linear/quicksort_three_way_single_pivot",
    "algorithms/sorting/comparison-based/log-linear/quicksort_two_way",
    "algorithms/sorting/comparison-based/log-linear/shellsort",
    "algorithms/sorting/comparison-based/log-linear/timsort",
    "algorithms/sorting/comparison-based/quadratic/bubble_sort",
    "algorithms/sorting/comparison-based/quadratic/cocktail_shaker_sort",
    "algorithms/sorting/comparison-based/quadratic/comb_sort",
    "algorithms/sorting/comparison-based/quadratic/cycle_sort",
    "algorithms/sorting/comparison-based/quadratic/gnome_sort",
    "algorithms/sorting/comparison-based/quadratic/insertion_sort",
    "algorithms/sorting/comparison-based/quadratic/odd_even_sort",
    "algorithms/sorting/comparison-based/quadratic/selection_sort",
    "algorithms/sorting/comparison-based/quadratic/strand_sort",
    "algorithms/sorting/embarrassingly-inefficient/bogosort",
    "algorithms/sorting/embarrassingly-inefficient/bozosort",
    "algorithms/sorting/embarrassingly-inefficient/pancake_sort",
    "algorithms/sorting/embarrassingly-inefficient/permutation_sort",
    "algorithms/sorting/embarrassingly-inefficient/sleep_sort",
    "algorithms/sorting/embarrassingly-inefficient/slowsort",
    "algorithms/sorting/embarrassingly-inefficient/stooge_sort",
    "algorithms/sorting/non-comparison-based/bitonic_sort",
    "algorithms/sorting/non-comparison-based/bucket_sort",
    "algorithms/sorting/non-comparison-based/counting_sort",
    "algorithms/sorting/non-comparison-based/pigeonhole_sort",
    "algorithms/sorting/non-comparison-based/radix_sort",
    "algorithms/string/anagram_check",
    "algorithms/string/balanced_bracket_sequence",
    "algorithms/string/boyer_moore",
    "algorithms/string/manacher",
    "algorithms/string/palindrome_check",
    "algorithms/string/prefix_function",
    "algorithms/string/rabin_karp",
    "algorithms/string/z_function",
    "data-structures/array/circular_deque",
    "data-structures/array/circular_queue",
    "data-structures/array/dynamic_array",
    "data-structures/array/dynamic_stack",
    "data-structures/list/doubly_linked_list",
    "data-structures/list/singly_linked_list",
    "data-structures/tree/binary_search_tree",
};
