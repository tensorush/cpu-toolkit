/*
    Tower Of Hanoi
    -----------------------
    Time: O(2^numDisks - 1)
    Space: O(1)
*/
#include <iostream>

void TowerOfHanoi(const unsigned& numDisks) {
    // TODO: Visualization + std::countr_zero from <bit> header.
    // The position of the bit change in the consecutive Gray code
    // provides the index of the disk that is moved at the current step.
    // The resulting sequence is known to be generated by the ruler function,
    // which is a restriction of the Thomae's function to the dyadic rationals.
    unsigned disk, mask, numMoves = 1 << numDisks;
    for (unsigned move = 1; move < numMoves; ++move) {
        for (disk = 1, mask = move; (mask & 1) == 0; ++disk) {
            mask >>= 1;
        }
        std::cout << "Move disk " << disk << " from " << (move & move - 1) % 3 << " to " << ((move | move - 1) + 1) % 3 << std::endl;
    }
}

int main() {
    unsigned numDisks;
    std::cin >> numDisks;
    TowerOfHanoi(numDisks);

    return EXIT_SUCCESS;
}
